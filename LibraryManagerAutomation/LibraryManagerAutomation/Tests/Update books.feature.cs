// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace LibraryManagerAutomation.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Update books")]
    public partial class UpdateBooksFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Update books.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Update books", "\tIn order to maintain books in a library\r\n\tAs a API consumer\r\n\tI want to be able " +
                    "to update books\' details through endpoint", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("User can update book information by \"Id\"")]
        [NUnit.Framework.CategoryAttribute("bug5")]
        [NUnit.Framework.TestCaseAttribute("1", "Change change 1@\'", "Test Description1", "Test Author1", null)]
        [NUnit.Framework.TestCaseAttribute("1", "Aaa Bbb Ccc", "Change change 1@\'", "Test Author1", null)]
        [NUnit.Framework.TestCaseAttribute("1", "Aaa Bbb Ccc", "Test Description1", "Change change 1@\'", null)]
        [NUnit.Framework.TestCaseAttribute("1", "Change change 1@\'", "Change change 1@\'", "Change change 1@\'", null)]
        public virtual void UserCanUpdateBookInformationById(string id, string title, string description, string author, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "bug5"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User can update book information by \"Id\"", @__tags);
#line 8
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Title",
                        "Description",
                        "Author"});
            table1.AddRow(new string[] {
                        "1",
                        "Aaa Bbb Ccc",
                        "Test Description1",
                        "Test Author1"});
            table1.AddRow(new string[] {
                        "2",
                        "Aaa Ddd Eee",
                        "Test Description2",
                        "Test Author2"});
#line 9
 testRunner.Given("Following books in library:", ((string)(null)), table1, "Given ");
#line 14
 testRunner.Given("\'PUT\' request to \'/books/1\' endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Title",
                        "Description",
                        "Author"});
            table2.AddRow(new string[] {
                        "1",
                        string.Format("{0}", title),
                        string.Format("{0}", description),
                        string.Format("{0}", author)});
#line 15
 testRunner.And("Add request payload as JSON object:", ((string)(null)), table2, "And ");
#line 18
 testRunner.And("Execute request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 19
 testRunner.Then("Response code is \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Title",
                        "Description",
                        "Author"});
            table3.AddRow(new string[] {
                        "1",
                        string.Format("{0}", title),
                        string.Format("{0}", description),
                        string.Format("{0}", author)});
#line 20
 testRunner.And("Response is:", ((string)(null)), table3, "And ");
#line 24
 testRunner.Then("\'GET\' request to \'/books/1\' endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 25
 testRunner.And("Execute request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 26
 testRunner.Then("Response code is \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Title",
                        "Description",
                        "Author"});
            table4.AddRow(new string[] {
                        "1",
                        string.Format("{0}", title),
                        string.Format("{0}", description),
                        string.Format("{0}", author)});
#line 27
 testRunner.And("Response is:", ((string)(null)), table4, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update of a given book does not update the details of other books")]
        [NUnit.Framework.CategoryAttribute("bug1")]
        [NUnit.Framework.TestCaseAttribute("1", "Change change 1@\'", "Test Description1", "Test Author1", null)]
        [NUnit.Framework.TestCaseAttribute("1", "Aaa Bbb Ccc", "Change change 1@\'", "Test Author1", null)]
        [NUnit.Framework.TestCaseAttribute("1", "Aaa Bbb Ccc", "Test Description1", "Change change 1@\'", null)]
        [NUnit.Framework.TestCaseAttribute("1", "Change change 1@\'", "Change change 1@\'", "Change change 1@\'", null)]
        public virtual void UpdateOfAGivenBookDoesNotUpdateTheDetailsOfOtherBooks(string id, string title, string description, string author, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "bug1"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update of a given book does not update the details of other books", @__tags);
#line 40
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Title",
                        "Description",
                        "Author"});
            table5.AddRow(new string[] {
                        "1",
                        "Aaa Bbb Ccc",
                        "Test Description1",
                        "Test Author1"});
            table5.AddRow(new string[] {
                        "2",
                        "Aaa Ddd Eee",
                        "Test Description2",
                        "Test Author2"});
#line 41
 testRunner.Given("Following books in library:", ((string)(null)), table5, "Given ");
#line 46
 testRunner.Given("\'PUT\' request to \'/books/1\' endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Title",
                        "Description",
                        "Author"});
            table6.AddRow(new string[] {
                        "1",
                        string.Format("{0}", title),
                        string.Format("{0}", description),
                        string.Format("{0}", author)});
#line 47
 testRunner.And("Add request payload as JSON object:", ((string)(null)), table6, "And ");
#line 50
 testRunner.And("Execute request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 51
 testRunner.Then("Response code is \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Title",
                        "Description",
                        "Author"});
            table7.AddRow(new string[] {
                        "1",
                        string.Format("{0}", title),
                        string.Format("{0}", description),
                        string.Format("{0}", author)});
#line 52
 testRunner.And("Response is:", ((string)(null)), table7, "And ");
#line 56
 testRunner.Then("\'GET\' request to \'/books/2\' endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 57
 testRunner.And("Execute request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 58
 testRunner.Then("Response code is \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Title",
                        "Description",
                        "Author"});
            table8.AddRow(new string[] {
                        "2",
                        "Aaa Ddd Eee",
                        "Test Description2",
                        "Test Author2"});
#line 59
 testRunner.And("Response is:", ((string)(null)), table8, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Users can update a book parameter max characters")]
        [NUnit.Framework.CategoryAttribute("bug1")]
        [NUnit.Framework.CategoryAttribute("bug7")]
        [NUnit.Framework.TestCaseAttribute("1", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" +
            "aaaaaaaaaaaaaaaaaaa", "Test author", null)]
        [NUnit.Framework.TestCaseAttribute("1", "Test title", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", null)]
        public virtual void UsersCanUpdateABookParameterMaxCharacters(string id, string title, string author, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "bug1",
                    "bug7"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Users can update a book parameter max characters", @__tags);
#line 72
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Title",
                        "Description",
                        "Author"});
            table9.AddRow(new string[] {
                        "1",
                        "Aaa Bbb Ccc",
                        "Test Description1",
                        "Test Author1"});
#line 73
 testRunner.Given("Following books in library:", ((string)(null)), table9, "Given ");
#line 77
 testRunner.When("\'PUT\' request to \'/books/1\' endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Title",
                        "Description",
                        "Author"});
            table10.AddRow(new string[] {
                        string.Format("{0}", id),
                        string.Format("{0}", title),
                        "Test Description",
                        string.Format("{0}", author)});
#line 78
 testRunner.And("Add request payload as JSON object:", ((string)(null)), table10, "And ");
#line 81
 testRunner.And("Execute request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 82
 testRunner.Then("Response code is \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Title",
                        "Description",
                        "Author"});
            table11.AddRow(new string[] {
                        string.Format("{0}", id),
                        string.Format("{0}", title),
                        "Test Description",
                        string.Format("{0}", author)});
#line 83
 testRunner.And("Response is:", ((string)(null)), table11, "And ");
#line 87
 testRunner.Then("\'GET\' request to \'/books\' endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 88
 testRunner.And("Execute request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 89
 testRunner.Then("Response code is \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Title",
                        "Description",
                        "Author"});
            table12.AddRow(new string[] {
                        string.Format("{0}", id),
                        string.Format("{0}", title),
                        "Test Description",
                        string.Format("{0}", author)});
#line 90
 testRunner.And("Response is collection of:", ((string)(null)), table12, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Users can skip passing parameter \"Description\" when updatding a book")]
        [NUnit.Framework.CategoryAttribute("bug8")]
        public virtual void UsersCanSkipPassingParameterDescriptionWhenUpdatdingABook()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Users can skip passing parameter \"Description\" when updatding a book", new string[] {
                        "bug8"});
#line 103
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Title",
                        "Description",
                        "Author"});
            table13.AddRow(new string[] {
                        "1",
                        "Test Title1",
                        "Test Description1",
                        "Test Author1"});
#line 104
 testRunner.Given("Following books in library:", ((string)(null)), table13, "Given ");
#line 108
 testRunner.When("\'PUT\' request to \'/books/1\' endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Title",
                        "Author"});
            table14.AddRow(new string[] {
                        "1",
                        "Test Title1",
                        "Test Author1"});
#line 109
 testRunner.And("Add request payload as JSON object:", ((string)(null)), table14, "And ");
#line 112
 testRunner.And("Execute request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 113
 testRunner.Then("Response code is \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Title",
                        "Description",
                        "Author"});
            table15.AddRow(new string[] {
                        "1",
                        "Test Title1",
                        "Test Description1",
                        "Test Author1"});
#line 114
 testRunner.And("Response is:", ((string)(null)), table15, "And ");
#line 118
 testRunner.Then("\'GET\' request to \'/books/1\' endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 119
 testRunner.And("Execute request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 120
 testRunner.Then("Response code is \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Title",
                        "Description",
                        "Author"});
            table16.AddRow(new string[] {
                        "1",
                        "Test Title1",
                        "Test Description1",
                        "Test Author1"});
#line 121
 testRunner.And("Response is:", ((string)(null)), table16, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Users can delete book\'s description")]
        [NUnit.Framework.CategoryAttribute("bug1")]
        [NUnit.Framework.CategoryAttribute("bug9")]
        public virtual void UsersCanDeleteBooksDescription()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Users can delete book\'s description", new string[] {
                        "bug1",
                        "bug9"});
#line 127
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Title",
                        "Description",
                        "Author"});
            table17.AddRow(new string[] {
                        "1",
                        "Test Title1",
                        "Test Description1",
                        "Test Author1"});
#line 128
 testRunner.Given("Following books in library:", ((string)(null)), table17, "Given ");
#line 132
 testRunner.When("\'PUT\' request to \'/books/1\' endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Title",
                        "Description",
                        "Author"});
            table18.AddRow(new string[] {
                        "1",
                        "Test Title1",
                        "$null",
                        "Test Author1"});
#line 133
 testRunner.And("Add request payload as JSON object:", ((string)(null)), table18, "And ");
#line 136
 testRunner.And("Execute request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 137
 testRunner.Then("Response code is \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Title",
                        "Description",
                        "Author"});
            table19.AddRow(new string[] {
                        "1",
                        "Test Title1",
                        "$null",
                        "Test Author1"});
#line 138
 testRunner.And("Response is:", ((string)(null)), table19, "And ");
#line 142
 testRunner.Then("\'GET\' request to \'/books/1\' endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 143
 testRunner.And("Execute request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 144
 testRunner.Then("Response code is \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Title",
                        "Description",
                        "Author"});
            table20.AddRow(new string[] {
                        "1",
                        "Test Title1",
                        "$null",
                        "Test Author1"});
#line 145
 testRunner.And("Response is:", ((string)(null)), table20, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Updating the details of non-existing book")]
        public virtual void UpdatingTheDetailsOfNon_ExistingBook()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Updating the details of non-existing book", ((string[])(null)));
#line 150
this.ScenarioSetup(scenarioInfo);
#line 151
 testRunner.Given("\'PUT\' request to \'/books/1\' endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Title",
                        "Description",
                        "Author"});
            table21.AddRow(new string[] {
                        "1",
                        "Aaa Bbb Ccc",
                        "Test Description1",
                        "Test Author1"});
#line 152
 testRunner.And("Add request payload as JSON object:", ((string)(null)), table21, "And ");
#line 155
 testRunner.And("Execute request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 156
 testRunner.Then("Response code is \'404\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Message"});
            table22.AddRow(new string[] {
                        "Book with id 1 not found!"});
#line 157
 testRunner.And("Response is:", ((string)(null)), table22, "And ");
#line 161
 testRunner.Then("\'GET\' request to \'/books\' endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 162
 testRunner.And("Execute request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 163
 testRunner.Then("Response code is \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
#line 164
 testRunner.And("Response is collection of:", ((string)(null)), table23, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Updating book details without specifying \"Id\"")]
        [NUnit.Framework.CategoryAttribute("bug1")]
        public virtual void UpdatingBookDetailsWithoutSpecifyingId()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Updating book details without specifying \"Id\"", new string[] {
                        "bug1"});
#line 169
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Title",
                        "Description",
                        "Author"});
            table24.AddRow(new string[] {
                        "1",
                        "Test Title",
                        "Test Description",
                        "Test Author"});
#line 170
 testRunner.Given("Following books in library:", ((string)(null)), table24, "Given ");
#line 174
 testRunner.Given("\'PUT\' request to \'/books\' endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Title",
                        "Description",
                        "Author"});
            table25.AddRow(new string[] {
                        "1",
                        "Changed Title",
                        "Changed Description",
                        "Changed Author"});
#line 175
 testRunner.And("Add request payload as JSON object:", ((string)(null)), table25, "And ");
#line 178
 testRunner.And("Execute request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 179
 testRunner.Then("Response code is \'405\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "Message"});
            table26.AddRow(new string[] {
                        "The requested resource does not support http method \'PUT\'."});
#line 180
 testRunner.And("Response is:", ((string)(null)), table26, "And ");
#line 184
 testRunner.Then("\'GET\' request to \'/books\' endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 185
 testRunner.And("Execute request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 186
 testRunner.Then("Response code is \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Title",
                        "Description",
                        "Author"});
            table27.AddRow(new string[] {
                        "1",
                        "Test Title",
                        "Test Description",
                        "Test Author"});
#line 187
 testRunner.And("Response is collection of:", ((string)(null)), table27, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Users cannot update a book if parameters\' values exceed the maximum")]
        [NUnit.Framework.CategoryAttribute("bug1")]
        [NUnit.Framework.CategoryAttribute("bug4")]
        [NUnit.Framework.TestCaseAttribute("0", "Test title", "Test author", "Book.Id should be a positive integer! Parameter name: book.Id", null)]
        [NUnit.Framework.TestCaseAttribute("1", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" +
            "aaaaaaaaaaaaaaaaaaaZ", "Test author", "Book.Title should not exceed 100 characters! Parameter name: Book.Title", null)]
        [NUnit.Framework.TestCaseAttribute("1", "Test title", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaZ", "Book.Author should not exceed 30 characters! Parameter name: Book.Author", null)]
        public virtual void UsersCannotUpdateABookIfParametersValuesExceedTheMaximum(string id, string title, string author, string message, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "bug1",
                    "bug4"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Users cannot update a book if parameters\' values exceed the maximum", @__tags);
#line 193
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Title",
                        "Description",
                        "Author"});
            table28.AddRow(new string[] {
                        "1",
                        "Aaa Bbb Ccc",
                        "Test Description1",
                        "Test Author1"});
#line 194
 testRunner.Given("Following books in library:", ((string)(null)), table28, "Given ");
#line 198
 testRunner.When("\'PUT\' request to \'/books/1\' endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Title",
                        "Description",
                        "Author"});
            table29.AddRow(new string[] {
                        string.Format("{0}", id),
                        string.Format("{0}", title),
                        "Test Description",
                        string.Format("{0}", author)});
#line 199
 testRunner.And("Add request payload as JSON object:", ((string)(null)), table29, "And ");
#line 202
 testRunner.And("Execute request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 203
 testRunner.Then("Response code is \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "Message"});
            table30.AddRow(new string[] {
                        string.Format("{0}", message)});
#line 204
 testRunner.And("Response is:", ((string)(null)), table30, "And ");
#line 208
 testRunner.Then("\'GET\' request to \'/books\' endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 209
 testRunner.And("Execute request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 210
 testRunner.Then("Response code is \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Title",
                        "Description",
                        "Author"});
            table31.AddRow(new string[] {
                        "1",
                        "Aaa Bbb Ccc",
                        "Test Description1",
                        "Test Author1"});
#line 211
 testRunner.And("Response is collection of:", ((string)(null)), table31, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Users cannot update a book without providing \"Id\", \"Title\" and \"Author\"")]
        [NUnit.Framework.CategoryAttribute("bug4")]
        [NUnit.Framework.CategoryAttribute("bug6")]
        [NUnit.Framework.TestCaseAttribute("Title", "Description", "Author", "Test title", "Test Description", "Test Author", "Book.Id should be a positive integer! Parameter name: book.Id", null)]
        [NUnit.Framework.TestCaseAttribute("Id", "Description", "Author", "{int}1", "Test Description", "Test Author", "Book.Title is a required field. Parameter name: book.Title", null)]
        [NUnit.Framework.TestCaseAttribute("Id", "Title", "Description", "{int}1", "Test title", "Test Description", "Book.Author is a required field. Parameter name: book.Author", null)]
        public virtual void UsersCannotUpdateABookWithoutProvidingIdTitleAndAuthor(string property1, string property2, string property3, string property1_Value, string property2_Value, string property3_Value, string message, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "bug4",
                    "bug6"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Users cannot update a book without providing \"Id\", \"Title\" and \"Author\"", @__tags);
#line 225
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Title",
                        "Description",
                        "Author"});
            table32.AddRow(new string[] {
                        "1",
                        "Test Title1",
                        "Test Description1",
                        "Test Author1"});
#line 226
 testRunner.Given("Following books in library:", ((string)(null)), table32, "Given ");
#line 230
 testRunner.When("\'PUT\' request to \'/books/1\' endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        string.Format("{0}", property1),
                        string.Format("{0}", property2),
                        string.Format("{0}", property3)});
            table33.AddRow(new string[] {
                        string.Format("{0}", property1_Value),
                        string.Format("{0}", property2_Value),
                        string.Format("{0}", property3_Value)});
#line 231
 testRunner.And("Add request payload as JSON object:", ((string)(null)), table33, "And ");
#line 234
 testRunner.When("Execute request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 235
 testRunner.Then("Response code is \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "Message"});
            table34.AddRow(new string[] {
                        string.Format("{0}", message)});
#line 236
 testRunner.And("Response is:", ((string)(null)), table34, "And ");
#line 240
 testRunner.Then("\'GET\' request to \'/books\' endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 241
 testRunner.And("Execute request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 242
 testRunner.Then("Response code is \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Title",
                        "Description",
                        "Author"});
            table35.AddRow(new string[] {
                        "1",
                        "Test Title1",
                        "Test Description1",
                        "Test Author1"});
#line 243
 testRunner.And("Response is collection of:", ((string)(null)), table35, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Users cannot add book with invalid parameter values")]
        [NUnit.Framework.CategoryAttribute("bug4")]
        [NUnit.Framework.CategoryAttribute("bug6")]
        [NUnit.Framework.CategoryAttribute("query6")]
        [NUnit.Framework.TestCaseAttribute("one", "Test Title", "Test Description", "Test Author", "Book.Id should be a positive integer! Parameter name: book.Id", null)]
        [NUnit.Framework.TestCaseAttribute("1", "{int}123", "Test Description", "Test Author", "TBC", null)]
        [NUnit.Framework.TestCaseAttribute("1", "Test Title", "{int}123", "Test Author", "TBC", null)]
        [NUnit.Framework.TestCaseAttribute("1", "Test Title", "Test Description", "{int}123", "TBC", null)]
        [NUnit.Framework.TestCaseAttribute("1", "{int}123", "{int}456", "{int}789", "TBC", null)]
        public virtual void UsersCannotAddBookWithInvalidParameterValues(string id, string title, string description, string author, string message, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "bug4",
                    "bug6",
                    "query6"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Users cannot add book with invalid parameter values", @__tags);
#line 255
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Title",
                        "Description",
                        "Author"});
            table36.AddRow(new string[] {
                        "1",
                        "Test Title1",
                        "Test Description1",
                        "Test Author1"});
#line 256
 testRunner.Given("Following books in library:", ((string)(null)), table36, "Given ");
#line 260
 testRunner.When("\'PUT\' request to \'/books/1\' endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Title",
                        "Description",
                        "Author"});
            table37.AddRow(new string[] {
                        string.Format("{0}", id),
                        string.Format("{0}", title),
                        string.Format("{0}", description),
                        string.Format("{0}", author)});
#line 261
 testRunner.And("Add request payload as JSON object:", ((string)(null)), table37, "And ");
#line 264
 testRunner.When("Execute request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 265
 testRunner.Then("Response code is \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        "Message"});
            table38.AddRow(new string[] {
                        string.Format("{0}", message)});
#line 266
 testRunner.And("Response is:", ((string)(null)), table38, "And ");
#line 270
 testRunner.Then("\'GET\' request to \'/books\' endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 271
 testRunner.And("Execute request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 272
 testRunner.Then("Response code is \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Title",
                        "Description",
                        "Author"});
            table39.AddRow(new string[] {
                        "1",
                        "Test Title1",
                        "Test Description1",
                        "Test Author1"});
#line 273
 testRunner.And("Response is collection of:", ((string)(null)), table39, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
